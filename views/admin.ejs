<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Family Chore Dashboard</title>
    
    <!-- Bootstrap & FontAwesome -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
    
    <style>
        :root {
            --primary-color: #4e73df;
            --secondary-color: #858796;
            --success-color: #1cc88a;
            --info-color: #36b9cc;
            --warning-color: #f6c23e;
            --danger-color: #e74a3b;
        }

        body {
            background-color: #f8f9fc;
            font-family: 'Nunito', sans-serif;
        }

        .sidebar {
            background: linear-gradient(180deg, var(--primary-color) 10%, #224abe 100%);
            min-height: 100vh;
            color: white;
        }

        .sidebar .nav-link {
            color: rgba(255,255,255,.8);
            padding: 1rem;
            margin: 0.2rem 0;
            border-radius: 0.35rem;
        }

        .sidebar .nav-link:hover {
            color: white;
            background-color: rgba(255,255,255,.1);
        }

        .sidebar .nav-link.active {
            color: white;
            background-color: rgba(255,255,255,.2);
        }

        .content-wrapper {
            min-height: 100vh;
        }

        .card {
            border: none;
            box-shadow: 0 .15rem 1.75rem 0 rgba(58,59,69,.15);
            margin-bottom: 1.5rem;
        }

        .card-header {
            background-color: #f8f9fc;
            border-bottom: 1px solid #e3e6f0;
        }

        .stats-card {
            border-left: .25rem solid var(--primary-color);
        }

        .stats-card.points {
            border-left-color: var(--success-color);
        }

        .stats-card.tasks {
            border-left-color: var(--info-color);
        }

        .stats-card.pending {
            border-left-color: var(--warning-color);
        }

        .modal-content {
            border: none;
            border-radius: .5rem;
        }

        .table {
            margin-bottom: 0;
        }

        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .progress {
            height: 0.5rem;
            margin-top: 0.5rem;
        }

        /* Mobile Responsive Styles */
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                bottom: 0;
                left: 0;
                right: 0;
                height: auto;
                min-height: auto;
                z-index: 1030;
            }

            .sidebar .nav {
                flex-direction: row;
                justify-content: space-around;
            }

            .sidebar .nav-link {
                padding: 0.5rem;
                text-align: center;
            }

            .sidebar .nav-link i {
                display: block;
                margin: 0 auto 0.25rem;
            }

            .content-wrapper {
                margin-bottom: 70px;
            }

            .card {
                margin-bottom: 1rem;
            }

            .stats-card {
                margin-bottom: 0.5rem;
            }

            .modal-dialog {
                margin: 0.5rem;
            }

            .verification-queue .media {
                flex-direction: column;
            }

            .verification-queue .media img {
                margin-bottom: 1rem;
            }
        }

        /* Enhanced Mobile Navigation */
        .mobile-nav {
            display: none;
        }

        @media (max-width: 768px) {
            .mobile-nav {
                display: flex;
                position: fixed;
                bottom: 0;
                left: 0;
                right: 0;
                background: white;
                box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
                z-index: 1040;
            }

            .mobile-nav-item {
                flex: 1;
                text-align: center;
                padding: 0.5rem;
                color: var(--secondary-color);
            }

            .mobile-nav-item.active {
                color: var(--primary-color);
            }

            .mobile-nav-item i {
                display: block;
                font-size: 1.25rem;
                margin-bottom: 0.25rem;
            }

            .mobile-nav-item span {
                font-size: 0.75rem;
            }
        }
    </style>
</head>
<body>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-2 px-0 sidebar">
            <div class="p-4">
                <h4 class="text-center mb-4">Family Chores</h4>
                <div class="nav flex-column">
                    <a class="nav-link active" href="#dashboard">
                        <i class="fas fa-fw fa-tachometer-alt me-2"></i>
                        Dashboard
                    </a>
                    <a class="nav-link" href="#family">
                        <i class="fas fa-fw fa-users me-2"></i>
                        Family Members
                    </a>
                    <a class="nav-link" href="#chores">
                        <i class="fas fa-fw fa-tasks me-2"></i>
                        Chores
                    </a>
                    <a class="nav-link" href="#rewards">
                        <i class="fas fa-fw fa-gift me-2"></i>
                        Rewards
                    </a>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-10 content-wrapper p-4">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3">Welcome, <%= username %></h1>
                <div class="d-flex align-items-center">
                    <div class="dropdown me-3">
                        <button class="btn btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            <i class="fas fa-bell fa-fw"></i>
                            <span class="notification-badge">0</span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end">
                            <!-- Notifications will go here -->
                        </div>
                    </div>
                    <form action="/logout" method="POST">
                        <button class="btn btn-outline-primary" type="submit">
                            <i class="fas fa-sign-out-alt me-2"></i>Logout
                        </button>
                    </form>
                </div>
            </div>

            <!-- Stats Cards -->
            <div class="row mb-4">
                <div class="col-xl-3 col-md-6">
                    <div class="card stats-card">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                        Total Family Members
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalMembers">0</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-users fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Additional Stats Cards -->
                <div class="col-xl-3 col-md-6">
                    <div class="card stats-card points">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                        Total Points Earned
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalPoints">0</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-star fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6">
                    <div class="card stats-card tasks">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                        Active Chores
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="activeChores">0</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-tasks fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6">
                    <div class="card stats-card pending">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                        Pending Approvals
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800" id="pendingApprovals">0</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-clock fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Content Row -->
            <div class="row">
                <!-- Family Members Card -->
                <div class="col-lg-6 mb-4">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="m-0 font-weight-bold text-primary">Family Members</h6>
                            <button class="btn btn-primary btn-sm" onclick="showAddMemberModal()">
                                <i class="fas fa-plus me-1"></i>Add Member
                            </button>
                        </div>
                        <div class="card-body">
                            <div id="familyMembersList">
                                <!-- Family members will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Chores Card -->
                <div class="col-lg-6 mb-4">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="m-0 font-weight-bold text-primary">Active Chores</h6>
                            <button class="btn btn-primary btn-sm" onclick="showAddChoreModal()">
                                <i class="fas fa-plus me-1"></i>Add Chore
                            </button>
                        </div>
                        <div class="card-body">
                            <div id="choresList">
                                <!-- Chores will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Activity Feed Card -->
                <div class="col-12 mb-4">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="m-0 font-weight-bold text-primary">
                                <i class="fas fa-stream me-2"></i>Activity Feed
                            </h6>
                            <div class="dropdown">
                                <button class="btn btn-link dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    Filter
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="filterActivity('all')">All Activity</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="filterActivity('chores')">Chores Only</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="filterActivity('points')">Points Only</a></li>
                                </ul>
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="activityFeed" class="activity-feed">
                                <!-- Activity items will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Rewards Section -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="m-0 font-weight-bold text-primary">
                                <i class="fas fa-gift me-2"></i>Available Rewards
                            </h6>
                            <button class="btn btn-primary btn-sm" onclick="showAddRewardModal()">
                                <i class="fas fa-plus me-1"></i>Add Reward
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="row" id="rewardsGrid">
                                <!-- Rewards will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Calendar Section -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="m-0 font-weight-bold text-primary">
                                <i class="fas fa-calendar me-2"></i>Chore Schedule
                            </h6>
                        </div>
                        <div class="card-body">
                            <div id="choreCalendar"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modals will go here -->

<!-- Add Member Modal -->
<div class="modal fade" id="addMemberModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Family Member</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addMemberForm">
                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <input type="text" class="form-control" name="username" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-control" name="password" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Avatar Color</label>
                        <select class="form-control" name="avatarColor">
                            <option value="#4e73df">Blue</option>
                            <option value="#1cc88a">Green</option>
                            <option value="#36b9cc">Cyan</option>
                            <option value="#f6c23e">Yellow</option>
                            <option value="#e74a3b">Red</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addFamilyMember()">Add Member</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Chore Modal -->
<div class="modal fade" id="addChoreModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Chore</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addChoreForm">
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input type="text" class="form-control" name="description" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Points</label>
                        <input type="number" class="form-control" name="points" required min="1">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Due Date</label>
                        <input type="date" class="form-control" name="dueDate">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Priority</label>
                        <select class="form-control" name="priority">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addChore()">Add Chore</button>
            </div>
        </div>
    </div>
</div>

<!-- Rewards Modal -->
<div class="modal fade" id="addRewardModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Reward</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addRewardForm">
                    <div class="mb-3">
                        <label class="form-label">Title</label>
                        <input type="text" class="form-control" name="title" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Points Required</label>
                        <input type="number" class="form-control" name="points_required" required min="1">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Image URL</label>
                        <input type="url" class="form-control" name="image_url">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addReward()">Add Reward</button>
            </div>
        </div>
    </div>
</div>

<!-- Schedule Chore Modal -->
<div class="modal fade" id="scheduleChoreModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Schedule Chore</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="scheduleChoreForm">
                    <input type="hidden" name="chore_id">
                    <div class="mb-3">
                        <label class="form-label">Assign To</label>
                        <select class="form-control" name="user_id">
                            <option value="">Select Family Member</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Frequency</label>
                        <select class="form-control" name="frequency" onchange="updateScheduleFields()">
                            <option value="daily">Daily</option>
                            <option value="weekly">Weekly</option>
                            <option value="monthly">Monthly</option>
                        </select>
                    </div>
                    <div class="mb-3" id="daySelection" style="display: none;">
                        <label class="form-label">Day</label>
                        <select class="form-control" name="day_of_week">
                            <option value="0">Sunday</option>
                            <option value="1">Monday</option>
                            <option value="2">Tuesday</option>
                            <option value="3">Wednesday</option>
                            <option value="4">Thursday</option>
                            <option value="5">Friday</option>
                            <option value="6">Saturday</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Time of Day</label>
                        <input type="time" class="form-control" name="time_of_day">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="date" class="form-control" name="start_date">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">End Date (Optional)</label>
                        <input type="date" class="form-control" name="end_date">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="scheduleChore()">Schedule</button>
            </div>
        </div>
    </div>
</div>

<!-- Notification Toast -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="notificationToast" class="toast" role="alert">
        <div class="toast-header">
            <strong class="me-auto">Notification</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
        </div>
        <div class="toast-body"></div>
    </div>
</div>

<!-- Reward Redemption Modal -->
<div class="modal fade" id="redeemRewardModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Redeem Reward</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-4">
                    <img id="rewardImage" src="" alt="Reward" class="img-fluid mb-3" style="max-height: 200px;">
                    <h4 id="rewardTitle"></h4>
                    <p id="rewardDescription" class="text-muted"></p>
                    <div class="points-required">
                        <i class="fas fa-star text-warning"></i>
                        <span id="pointsRequired"></span> points required
                    </div>
                </div>
                <div class="alert alert-info">
                    Your current points: <span id="currentPoints"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="redeemReward()">Redeem Reward</button>
            </div>
        </div>
    </div>
</div>

<!-- Parent Settings Modal -->
<div class="modal fade" id="parentSettingsModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Parent Controls</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs mb-3" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" data-bs-toggle="tab" href="#verificationSettings">
                            <i class="fas fa-check-circle me-2"></i>Verification
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#pointSettings">
                            <i class="fas fa-star me-2"></i>Points
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#permissionSettings">
                            <i class="fas fa-lock me-2"></i>Permissions
                        </a>
                    </li>
                </ul>

                <div class="tab-content">
                    <!-- Verification Settings -->
                    <div class="tab-pane fade show active" id="verificationSettings">
                        <form id="verificationSettingsForm">
                            <div class="mb-3">
                                <label class="form-label">Auto-verify chores below points:</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" name="auto_verify_below_points"
                                           min="0" step="1">
                                    <span class="input-group-text">points</span>
                                </div>
                                <small class="text-muted">Chores worth less than this will be auto-approved</small>
                            </div>

                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" name="require_photo_proof">
                                    <label class="form-check-label">Require photo proof for completion</label>
                                </div>
                            </div>
                        </form>
                    </div>

                    <!-- Points Settings -->
                    <div class="tab-pane fade" id="pointSettings">
                        <form id="pointSettingsForm">
                            <div class="mb-3">
                                <label class="form-label">Point Multiplier:</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" name="point_multiplier"
                                           min="0.1" max="5" step="0.1" value="1.0">
                                    <span class="input-group-text">×</span>
                                </div>
                                <small class="text-muted">Multiply earned points by this value</small>
                            </div>
                        </form>
                    </div>

                    <!-- Permission Settings -->
                    <div class="tab-pane fade" id="permissionSettings">
                        <form id="permissionSettingsForm">
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" name="allow_child_scheduling">
                                    <label class="form-check-label">Allow children to schedule their own chores</label>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveParentSettings()">Save Settings</button>
            </div>
        </div>
    </div>
</div>

<!-- Verification Queue Modal -->
<div class="modal fade" id="verificationQueueModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Verification Queue</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="verification-queue" id="verificationQueue">
                    <!-- Queue items will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
// Global variables
let familyMembers = [];
let chores = [];
let activities = [];
let notifications = [];

// Initialize Bootstrap components
document.addEventListener('DOMContentLoaded', function() {
    loadDashboardData();
    loadNotifications();
    startPolling();
});

// Modal handlers
const memberModal = new bootstrap.Modal(document.getElementById('addMemberModal'));
const choreModal = new bootstrap.Modal(document.getElementById('addChoreModal'));
const toast = new bootstrap.Toast(document.getElementById('notificationToast'));

// Data loading functions
async function loadDashboardData() {
    await Promise.all([
        loadFamilyMembers(),
        loadChores(),
        loadActivity()
    ]);
    updateDashboardStats();
}

async function loadFamilyMembers() {
    try {
        const response = await fetch('/api/family-members');
        familyMembers = await response.json();
        renderFamilyMembers();
    } catch (error) {
        showNotification('Error loading family members', 'error');
    }
}

async function loadChores() {
    try {
        const response = await fetch('/api/chores');
        chores = await response.json();
        renderChores();
    } catch (error) {
        showNotification('Error loading chores', 'error');
    }
}

async function loadActivity() {
    try {
        const response = await fetch('/api/activity');
        activities = await response.json();
        renderActivity();
    } catch (error) {
        showNotification('Error loading activity', 'error');
    }
}

async function loadNotifications() {
    try {
        const response = await fetch('/api/notifications');
        notifications = await response.json();
        renderNotifications();
        updateNotificationBadge();
    } catch (error) {
        console.error('Error loading notifications:', error);
    }
}

// Render functions
function renderFamilyMembers() {
    const container = document.getElementById('familyMembersList');
    container.innerHTML = familyMembers.map(member => `
        <div class="d-flex align-items-center mb-3 p-3 border rounded">
            <div class="avatar me-3" style="background-color: ${member.avatarColor || '#4e73df'}">
                ${member.username[0].toUpperCase()}
            </div>
            <div class="flex-grow-1">
                <h6 class="mb-0">${member.username}</h6>
                <small class="text-muted">${member.points} points</small>
            </div>
            <div class="ms-auto">
                <button class="btn btn-sm btn-outline-primary me-2" onclick="viewMemberDetails(${member.id})">
                    <i class="fas fa-eye"></i>
                </button>
                <button class="btn btn-sm btn-outline-danger" onclick="removeMember(${member.id})">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `).join('');
}

function renderChores() {
    const container = document.getElementById('choresList');
    container.innerHTML = chores.map(chore => `
        <div class="d-flex align-items-center mb-3 p-3 border rounded">
            <div class="flex-grow-1">
                <h6 class="mb-0">${chore.description}</h6>
                <small class="text-muted">${chore.points} points</small>
            </div>
            <div class="ms-auto">
                <button class="btn btn-sm btn-success me-2" onclick="assignChore(${chore.id})">
                    <i class="fas fa-user-plus"></i>
                </button>
                <button class="btn btn-sm btn-danger" onclick="deleteChore(${chore.id})">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `).join('');
}

function renderActivity() {
    const container = document.getElementById('activityFeed');
    if (!container) return;
    
    container.innerHTML = activities.map(activity => `
        <div class="d-flex align-items-center mb-3">
            <div class="avatar me-3" style="background-color: ${activity.avatarColor || '#4e73df'}">
                ${activity.username[0].toUpperCase()}
            </div>
            <div>
                <p class="mb-0"><strong>${activity.username}</strong> ${activity.description}</p>
                <small class="text-muted">${formatDate(activity.created_at)}</small>
            </div>
        </div>
    `).join('');
}

function renderNotifications() {
    const container = document.querySelector('.dropdown-menu');
    if (notifications.length === 0) {
        container.innerHTML = '<li><span class="dropdown-item text-muted">No new notifications</span></li>';
        return;
    }

    container.innerHTML = notifications.map(notification => `
        <li>
            <a class="dropdown-item ${notification.read ? 'text-muted' : ''}" href="#" 
               onclick="handleNotification(${notification.id})">
                <i class="fas ${getNotificationIcon(notification.type)} me-2"></i>
                ${notification.message}
                <br>
                <small class="text-muted">${formatDate(notification.created_at)}</small>
            </a>
        </li>
    `).join('');
}

// Action handlers
async function addFamilyMember() {
    const form = document.getElementById('addMemberForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/api/family-members', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        if (response.ok) {
            const newMember = await response.json();
            familyMembers.push(newMember);
            renderFamilyMembers();
            memberModal.hide();
            form.reset();
            showNotification('Family member added successfully');
        } else {
            throw new Error('Failed to add family member');
        }
    } catch (error) {
        showNotification('Error adding family member', 'error');
    }
}

async function addChore() {
    const form = document.getElementById('addChoreForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/api/chores', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        if (response.ok) {
            const newChore = await response.json();
            chores.push(newChore);
            renderChores();
            choreModal.hide();
            form.reset();
            showNotification('Chore added successfully');
        } else {
            throw new Error('Failed to add chore');
        }
    } catch (error) {
        showNotification('Error adding chore', 'error');
    }
}

async function handleNotification(notificationId) {
    try {
        await fetch('/api/notifications/mark-read', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ notificationId })
        });
        
        const notification = notifications.find(n => n.id === notificationId);
        if (notification) {
            notification.read = true;
            renderNotifications();
            updateNotificationBadge();
        }
    } catch (error) {
        console.error('Error handling notification:', error);
    }
}

// Utility functions
function showNotification(message, type = 'success') {
    const toastEl = document.getElementById('notificationToast');
    toastEl.querySelector('.toast-body').textContent = message;
    toastEl.classList.toggle('bg-danger', type === 'error');
    toast.show();
}

function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function getNotificationIcon(type) {
    const icons = {
        'chore': 'fa-tasks',
        'points': 'fa-star',
        'approval': 'fa-check-circle',
        'system': 'fa-info-circle'
    };
    return icons[type] || 'fa-bell';
}

function updateNotificationBadge() {
    const unreadCount = notifications.filter(n => !n.read).length;
    const badge = document.querySelector('.notification-badge');
    if (badge) {
        badge.textContent = unreadCount;
        badge.style.display = unreadCount > 0 ? 'block' : 'none';
    }
}

// Stats update
function updateDashboardStats() {
    const totalPoints = familyMembers.reduce((sum, member) => sum + member.points, 0);
    const pendingApprovals = chores.filter(chore => chore.status === 'pending').length;
    
    document.getElementById('totalMembers').textContent = familyMembers.length;
    document.getElementById('totalPoints').textContent = totalPoints;
    document.getElementById('activeChores').textContent = chores.length;
    document.getElementById('pendingApprovals').textContent = pendingApprovals;
}

// Start polling for updates
function startPolling() {
    setInterval(() => {
        loadDashboardData();
        loadNotifications();
    }, 30000); // Poll every 30 seconds
}

// Rewards handling
async function addReward() {
    const form = document.getElementById('addRewardForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/api/rewards', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        if (response.ok) {
            const reward = await response.json();
            showNotification('Reward added successfully');
            loadRewards();
            $('#addRewardModal').modal('hide');
            form.reset();
        } else {
            throw new Error('Failed to add reward');
        }
    } catch (error) {
        showNotification('Error adding reward', 'error');
    }
}

// Scheduling handling
function showScheduleModal(choreId) {
    const form = document.getElementById('scheduleChoreForm');
    form.elements.chore_id.value = choreId;
    
    // Populate family members dropdown
    const userSelect = form.elements.user_id;
    userSelect.innerHTML = '<option value="">Select Family Member</option>' +
        familyMembers.map(member => 
            `<option value="${member.id}">${member.username}</option>`
        ).join('');
    
    new bootstrap.Modal(document.getElementById('scheduleChoreModal')).show();
}

function updateScheduleFields() {
    const frequency = document.querySelector('[name="frequency"]').value;
    const daySelection = document.getElementById('daySelection');
    daySelection.style.display = frequency !== 'daily' ? 'block' : 'none';
}

async function scheduleChore() {
    const form = document.getElementById('scheduleChoreForm');
    const formData = new FormData(form);
    
    try {
        const response = await fetch('/api/chores/schedule', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(Object.fromEntries(formData))
        });
        
        if (response.ok) {
            showNotification('Chore scheduled successfully');
            loadChores();
            $('#scheduleChoreModal').modal('hide');
            form.reset();
        } else {
            throw new Error('Failed to schedule chore');
        }
    } catch (error) {
        showNotification('Error scheduling chore', 'error');
    }
}

// Add FullCalendar initialization
document.addEventListener('DOMContentLoaded', function() {
    const calendarEl = document.getElementById('choreCalendar');
    const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        events: function(info, successCallback, failureCallback) {
            fetch(`/api/calendar/chores?start=${info.startStr}&end=${info.endStr}`)
                .then(response => response.json())
                .then(events => successCallback(events))
                .catch(error => failureCallback(error));
        },
        eventClick: function(info) {
            showChoreDetails(info.event);
        }
    });
    calendar.render();
});

// Rewards handling
let currentRewards = [];

async function loadRewards() {
    try {
        const response = await fetch('/api/rewards');
        currentRewards = await response.json();
        renderRewards();
    } catch (error) {
        showNotification('Error loading rewards', 'error');
    }
}

function renderRewards() {
    const container = document.getElementById('rewardsGrid');
    container.innerHTML = currentRewards.map(reward => `
        <div class="col-md-4 col-lg-3 mb-4">
            <div class="card h-100">
                <img src="${reward.image_url || 'default-reward.png'}" 
                     class="card-img-top" alt="${reward.title}"
                     style="height: 200px; object-fit: cover;">
                <div class="card-body">
                    <h5 class="card-title">${reward.title}</h5>
                    <p class="card-text">${reward.description}</p>
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="text-warning">
                            <i class="fas fa-star"></i> ${reward.points_required}
                        </span>
                        <button class="btn btn-primary btn-sm" 
                                onclick="showRedeemModal(${reward.id})">
                            Redeem
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}

function showRedeemModal(rewardId) {
    const reward = currentRewards.find(r => r.id === rewardId);
    if (!reward) return;

    document.getElementById('rewardImage').src = reward.image_url || 'default-reward.png';
    document.getElementById('rewardTitle').textContent = reward.title;
    document.getElementById('rewardDescription').textContent = reward.description;
    document.getElementById('pointsRequired').textContent = reward.points_required;
    document.getElementById('currentPoints').textContent = currentUserPoints;

    const modal = new bootstrap.Modal(document.getElementById('redeemRewardModal'));
    modal.show();
}

async function redeemReward(rewardId) {
    try {
        const response = await fetch('/api/rewards/redeem', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ rewardId })
        });

        if (response.ok) {
            showNotification('Reward redeemed successfully!');
            loadRewards();
            bootstrap.Modal.getInstance(document.getElementById('redeemRewardModal')).hide();
        } else {
            const data = await response.json();
            throw new Error(data.error);
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

// Push notification registration
async function registerPushNotifications() {
    try {
        const registration = await navigator.serviceWorker.register('/service-worker.js');
        const subscription = await registration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: 'YOUR_VAPID_PUBLIC_KEY'
        });

        await fetch('/api/notifications/subscribe', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(subscription)
        });

        showNotification('Notifications enabled successfully');
    } catch (error) {
        showNotification('Failed to enable notifications', 'error');
    }
}

// Chore completion handling
async function markChoreComplete(choreId, scheduledChoreId = null) {
    try {
        const response = await fetch('/api/chores/complete', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ choreId, scheduledChoreId })
        });

        if (response.ok) {
            showNotification('Chore marked as complete!');
            loadChores();
            updateDashboardStats();
        } else {
            throw new Error('Failed to complete chore');
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

// Add completion tracking to calendar events
function renderChoreEvent(chore) {
    return {
        id: chore.id,
        title: chore.description,
        start: chore.due_date,
        className: getChoreStatusClass(chore),
        extendedProps: {
            points: chore.points,
            completed: chore.completed,
            verified: chore.verified
        }
    };
}

function getChoreStatusClass(chore) {
    if (chore.verified) return 'bg-success';
    if (chore.completed) return 'bg-warning';
    return 'bg-primary';
}

// Parent Settings Management
let parentSettings = {};

async function loadParentSettings() {
    try {
        const response = await fetch('/api/parent/settings');
        parentSettings = await response.json();
        populateSettingsForm();
    } catch (error) {
        showNotification('Error loading settings', 'error');
    }
}

function populateSettingsForm() {
    const forms = {
        verificationSettingsForm: ['auto_verify_below_points', 'require_photo_proof'],
        pointSettingsForm: ['point_multiplier'],
        permissionSettingsForm: ['allow_child_scheduling']
    };

    Object.entries(forms).forEach(([formId, fields]) => {
        const form = document.getElementById(formId);
        fields.forEach(field => {
            const input = form.elements[field];
            if (input.type === 'checkbox') {
                input.checked = parentSettings[field];
            } else {
                input.value = parentSettings[field];
            }
        });
    });
}

async function saveParentSettings() {
    const settings = {
        auto_verify_below_points: parseInt(document.querySelector('[name="auto_verify_below_points"]').value),
        require_photo_proof: document.querySelector('[name="require_photo_proof"]').checked,
        allow_child_scheduling: document.querySelector('[name="allow_child_scheduling"]').checked,
        point_multiplier: parseFloat(document.querySelector('[name="point_multiplier"]').value)
    };

    try {
        const response = await fetch('/api/parent/settings', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(settings)
        });

        if (response.ok) {
            showNotification('Settings saved successfully');
            parentSettings = settings;
            bootstrap.Modal.getInstance(document.getElementById('parentSettingsModal')).hide();
        } else {
            throw new Error('Failed to save settings');
        }
    } catch (error) {
        showNotification('Error saving settings', 'error');
    }
}

// Verification Queue Management
async function loadVerificationQueue() {
    try {
        const response = await fetch('/api/chores/pending-verification');
        const queue = await response.json();
        renderVerificationQueue(queue);
    } catch (error) {
        showNotification('Error loading verification queue', 'error');
    }
}

function renderVerificationQueue(queue) {
    const container = document.getElementById('verificationQueue');
    if (queue.length === 0) {
        container.innerHTML = '<p class="text-center text-muted">No items waiting for verification</p>';
        return;
    }

    container.innerHTML = queue.map(item => `
        <div class="card mb-3">
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <div class="avatar me-3" style="background-color: ${item.avatarColor || '#4e73df'}">
                        ${item.username[0].toUpperCase()}
                    </div>
                    <div>
                        <h6 class="mb-0">${item.username}</h6>
                        <small class="text-muted">${formatDate(item.completed_at)}</small>
                    </div>
                </div>
                
                <h5 class="card-title">${item.description}</h5>
                ${item.photo_proof ? `
                    <img src="${item.photo_proof}" class="img-fluid rounded mb-3" alt="Proof">
                ` : ''}
                
                <div class="mb-3">
                    <label class="form-label">Feedback (optional):</label>
                    <textarea class="form-control" id="feedback-${item.id}"></textarea>
                </div>
                
                <div class="d-flex justify-content-end">
                    <button class="btn btn-danger me-2" onclick="verifyChore(${item.id}, false)">
                        <i class="fas fa-times me-1"></i>Reject
                    </button>
                    <button class="btn btn-success" onclick="verifyChore(${item.id}, true)">
                        <i class="fas fa-check me-1"></i>Approve
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

async function verifyChore(completionId, approved) {
    const feedback = document.getElementById(`feedback-${completionId}`).value;
    
    try {
        const response = await fetch('/api/chores/verify', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ completionId, approved, feedback })
        });

        if (response.ok) {
            showNotification(`Chore ${approved ? 'approved' : 'rejected'} successfully`);
            loadVerificationQueue();
        } else {
            throw new Error('Verification failed');
        }
    } catch (error) {
        showNotification('Error processing verification', 'error');
    }
}

// Initialize parent controls
if (userRole === 'parent') {
    loadParentSettings();
    loadVerificationQueue();
}
</script>

</body>
</html>